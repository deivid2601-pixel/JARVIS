import pandas as pd
import pywhatkit as kit
import time
import pyautogui
import os
from datetime import datetime, timedelta
import warnings
import random
warnings.filterwarnings('ignore')

class JarvisVendasPremium:
    def __init__(self):
        self.ARQUIVO_PLANILHA = r"C:\Users\gameb\Downloads\MENSAGEM.xlsx"
        self.MEU_NUMERO = "+553133590287"
        self.MODO_TESTE = False  # AGORA FALSE PARA ENVIAR DE VERDADE
        
        # Emojis para variar as mensagens
        self.emojis_meta = ["üéØ", "‚≠ê", "üî•", "üöÄ", "üíé", "üèÜ", "‚ú®", "üí™"]
        
    def carregar_dados_planilha(self):
        """Carrega e limpa os dados da planilha"""
        try:
            print("üìä CARREGANDO DADOS...")
            
            df = pd.read_excel(self.ARQUIVO_PLANILHA)
            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
            df = df.dropna(how='all')
            
            # VERIFICAR COLUNAS EXISTENTES
            print(f"üîç Colunas encontradas: {list(df.columns)}")
            
            # DETECTAR COLUNAS AUTOMATICAMENTE
            colunas_map = {}
            for col in df.columns:
                col_lower = str(col).lower()
                
                if any(palavra in col_lower for palavra in ['nome', 'vendedor']):
                    colunas_map['NOME'] = col
                elif any(palavra in col_lower for palavra in ['meta', 'objetivo']):
                    colunas_map['META'] = col
                elif any(palavra in col_lower for palavra in ['liquido', 'realizado', 'venda']):
                    colunas_map['LIQUIDO'] = col
                elif any(palavra in col_lower for palavra in ['celular', 'telefone', 'whatsapp', 'numero']):
                    colunas_map['CELULAR'] = col
            
            print(f"üéØ Colunas mapeadas: {colunas_map}")
            
            # RENOMEAR COLUNAS PARA O PADR√ÉO DO C√ìDIGO
            for col_padrao, col_original in colunas_map.items():
                df[col_padrao] = df[col_original]
            
            # VERIFICAR SE TEMOS DADOS M√çNIMOS
            if 'NOME' not in df.columns:
                print("‚ùå ERRO: Coluna 'NOME' n√£o encontrada!")
                return None
            
            # C√ÅLCULOS DE DESEMPENHO
            if 'META' in df.columns and 'LIQUIDO' in df.columns:
                df['RANKING'] = df['LIQUIDO'].rank(ascending=False)
                df['ATINGIMENTO'] = (df['LIQUIDO'] / df['META']) * 100
                df['FALTANTE'] = df['META'] - df['LIQUIDO']
                df['EXCEDENTE'] = df['LIQUIDO'] - df['META']
                
                print(f"‚úÖ C√°lculos de desempenho adicionados")
            
            print(f"‚úÖ {len(df)} vendedores carregados com sucesso!")
            return df
            
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico ao carregar planilha: {e}")
            return None
    
    def obter_mensagem_desempenho(self, atingimento, faltante, nome, excedente=0):
        """Retorna mensagem personalizada baseada no percentual de desempenho"""
        
        if atingimento < 50:
            return {
                'emoji': "üî¥",
                'titulo': "VAMOS JUNTOS BUSCAR SUA META!",
                'mensagem': f"*{nome}*, que tal darmos uma nova estrat√©gia? Faltam R$ {faltante:,.2f} para sua meta.\nüìà Vamos encontrar o melhor caminho para alcan√ßar seu objetivo!",
                'dica': "üí° Dica: Foque nas vendas de maior valor e revise sua abordagem!"
            }
        
        elif atingimento < 80:
            return {
                'emoji': "üü°",
                'titulo': "VOC√ä EST√Å NO CAMINHO CERTO!",
                'mensagem': f"*{nome}*, faltou pouco! Apenas R$ {faltante:,.2f} para bater a meta.\n‚ö° Ajuste o foco e continue avan√ßando!",
                'dica': "üí° Dica: Revise seus clientes pendentes e fa√ßa follow-up!"
            }
        
        elif atingimento < 100:
            return {
                'emoji': "üü†", 
                'titulo': "QUASE L√Å! √öLTIMO ESFOR√áO!",
                'mensagem': f"*{nome}*, t√° chegando! S√≥ R$ {faltante:,.2f} para conquistar sua meta.\nüéØ Mais um push final!",
                'dica': "üí° Dica: Foque nos clientes mais pr√≥ximos de fechar!"
            }
        
        elif atingimento == 100:
            return {
                'emoji': "üü¢",
                'titulo': "META BATIDA! PARAB√âNS!",
                'mensagem': f"*{nome}*, voc√™ ATINGIU 100% da meta!\nüéä Comemore este resultado e j√° prepare o pr√≥ximo desafio!",
                'dica': "üí° Dica: Agora √© hora de mirar ainda mais alto!"
            }
        
        elif atingimento < 150:
            return {
                'emoji': "üîµ",
                'titulo': "META SUPERADA! EXCELENTE!",
                'mensagem': f"*{nome}*, voc√™ foi al√©m! Superou a meta em R$ {excedente:,.2f}!\nüåü Resultado fant√°stico!",
                'dica': "üí° Dica: Continue com essa performance incr√≠vel!"
            }
        
        else:  # acima de 150%
            return {
                'emoji': "üí•",
                'titulo': "ARREBENTOU A BOCA DO BAL√ÉO!",
                'mensagem': f"*{nome}*, performance ESPETACULAR! {atingimento:.1f}% de atingimento!\nüöÄ Voc√™ √© refer√™ncia! Continue brilhando!",
                'dica': "üí° Dica: Voc√™ est√° no patamar dos grandes performers!"
            }
    
    def criar_mensagem_premium(self, vendedor):
        """Cria mensagem premium com ranking e mensagens personalizadas"""
        nome = vendedor['NOME']
        
        # VERIFICAR SE TEM DADOS DE META E LIQUIDO
        if 'META' in vendedor and 'LIQUIDO' in vendedor and pd.notna(vendedor['META']) and pd.notna(vendedor['LIQUIDO']):
            meta = float(vendedor['META'])
            liquido = float(vendedor['LIQUIDO'])
            atingimento = float(vendedor['ATINGIMENTO'])
            faltante = float(vendedor['FALTANTE'])
            excedente = float(vendedor.get('EXCEDENTE', 0))
            ranking = int(vendedor['RANKING'])
            
            # Obt√©m mensagem personalizada baseada no desempenho
            msg_desempenho = self.obter_mensagem_desempenho(atingimento, faltante, nome, excedente)
            
            # Constr√≥i a mensagem
            mensagem = f"{msg_desempenho['emoji']} *RELAT√ìRIO {nome}* {msg_desempenho['emoji']}\n\n"
            mensagem += "üìä SEU DESEMPENHO:\n"
            mensagem += "‚îú‚îÄ üéØ Meta: R$ {:,.2f}\n".format(meta)
            mensagem += "‚îú‚îÄ üíµ Realizado: R$ {:,.2f}\n".format(liquido)
            mensagem += "‚îú‚îÄ üìà Atingimento: {:.1f}%\n".format(atingimento)
            mensagem += "‚îî‚îÄ üèÖ Posi√ß√£o: {}¬∫ lugar\n\n".format(ranking)
            
            # Adiciona mensagem personalizada
            mensagem += f"‚ö° *{msg_desempenho['titulo']}* ‚ö°\n"
            mensagem += f"{msg_desempenho['mensagem']}\n\n"
            mensagem += f"{msg_desempenho['dica']}\n"
            
            # Adiciona mensagem extra para quem bateu meta
            if atingimento >= 100:
                mensagem += "\nüéØ *PR√ìXIMO DESAFIO:* Manter essa performance incr√≠vel!"
            else:
                mensagem += f"\nüéØ *PR√ìXIMO DESAFIO:* Alcan√ßar os R$ {faltante:,.2f} faltantes!"
        else:
            # Mensagem b√°sica se n√£o tiver dados completos
            mensagem = f"üìä *RELAT√ìRIO {nome}*\n\n"
            mensagem += "Ol√°! Aqui est√° seu relat√≥rio individual.\n"
            mensagem += "Entre em contato para mais detalhes sobre seu desempenho."
        
        mensagem += f"\nüïí {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        return mensagem

    def formatar_numero_whatsapp(self, numero):
        """Formata o n√∫mero para o padr√£o do WhatsApp"""
        # Remove caracteres n√£o num√©ricos
        numero_limpo = ''.join(filter(str.isdigit, str(numero)))
        
        # Verifica se tem c√≥digo do pa√≠s
        if not numero_limpo.startswith('55'):
            numero_limpo = '55' + numero_limpo
            
        return '+' + numero_limpo

    def enviar_whatsapp(self, numero, mensagem):
        """Envia mensagem via WhatsApp Web"""
        try:
            if self.MODO_TESTE:
                print(f"üß™ MODO TESTE - Mensagem para {numero}:")
                print("-" * 50)
                print(mensagem)
                print("-" * 50)
                time.sleep(1)
                return True
            
            print(f"üì§ ENVIANDO PARA {numero}...")
            
            # Formatar n√∫mero
            numero_formatado = self.formatar_numero_whatsapp(numero)
            print(f"üìû N√∫mero formatado: {numero_formatado}")
            
            # Envia a mensagem
            kit.sendwhatmsg_instantly(
                phone_no=numero_formatado,
                message=mensagem,
                wait_time=20,
                tab_close=False
            )
            
            # Aguarda a mensagem ser enviada
            time.sleep(8)
            
            # Fecha a aba
            pyautogui.hotkey('ctrl', 'w')
            time.sleep(2)
            
            print(f"‚úÖ MENSAGEM ENVIADA PARA {numero}")
            return True
            
        except Exception as e:
            print(f"‚ùå ERRO AO ENVIAR PARA {numero}: {e}")
            return False

    def executar_campanha(self):
        """Executa a campanha completa de mensagens"""
        print("üöÄ INICIANDO CAMPANHA JARVIS PREMIUM")
        print("=" * 50)
        
        df = self.carregar_dados_planilha()
        if df is None:
            print("‚ùå N√£o foi poss√≠vel carregar os dados")
            return
        
        # Ordena por ranking (melhores primeiro)
        if 'RANKING' in df.columns:
            df = df.sort_values('RANKING')
        
        total = len(df)
        sucessos = 0
        
        print("‚ö†Ô∏è  CERTIFIQUE-SE QUE:")
        print("1. Voc√™ est√° logado no WhatsApp Web")
        print("2. A janela do navegador est√° vis√≠vel")
        print("3. N√£o mexa no computador durante o envio")
        print("=" * 50)
        
        input("Pressione ENTER para iniciar o envio...")
        
        for index, vendedor in df.iterrows():
            print(f"\nüìã Processando {vendedor['NOME']} ({index + 1}/{total})...")
            
            # Cria mensagem personalizada
            mensagem = self.criar_mensagem_premium(vendedor)
            
            # Determinar n√∫mero de destino
            if 'CELULAR' in vendedor and pd.notna(vendedor['CELULAR']):
                numero_destino = vendedor['CELULAR']
            else:
                print(f"‚ö†Ô∏è  Sem n√∫mero para {vendedor['NOME']}, pulando...")
                continue
            
            # Enviar mensagem
            if self.enviar_whatsapp(numero_destino, mensagem):
                sucessos += 1
            
            # Intervalo M√çNIMO entre mensagens
            if index < total - 1:
                intervalo = 5  # Apenas 5 segundos entre mensagens
                print(f"‚è≥ Aguardando {intervalo} segundos...")
                time.sleep(intervalo)
        
        print(f"\nüéâ CAMPANHA CONCLU√çDA!")
        print(f"‚úÖ {sucessos}/{total} mensagens enviadas com sucesso")

# Executar a campanha
if __name__ == "__main__":
    jarvis = JarvisVendasPremium()
    jarvis.executar_campanha()
